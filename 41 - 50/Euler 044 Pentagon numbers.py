"""
Pentagonal numbers are generated by the formula,
P_n=n(3n−1)/2. The first ten pentagonal numbers are:
1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8.
However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their
sum and difference are pentagonal and D = |Pk − Pj| is minimised;
what is the value of D?
"""
import time
start=time.clock()


#nth pentagonal number
pent = lambda x: (x*x*3 - x)//2

#returns value of y such that pent(y) = x
inv_pent = lambda x: ((2*x + 1)/3 )**0.5

#uses math to check if number is pentagonal in constant time
is_pent = lambda x: abs(inv_pent(x) - round(inv_pent(x))) < 0.000001 


#Find a pair where difference/sum are pentagonal
ans = None
ind_1 = 0
while ans==None:
    ind_1 += 1
    pent_1 = pent(ind_1)
    
    for ind_2 in range(1,ind_1):
        pent_2 = pent(ind_2)
        sum = pent_1 + pent_2
        dif = pent_1 - pent_2
        if is_pent(sum) and is_pent(dif):
            ans = dif

  
print(ans)
print(time.clock()-start)
